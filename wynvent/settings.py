"""
Django settings for wynvent project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9rc=9p(+tdmndkffk8ewl9+*p-iy=gh**p^s@4an+uyrt08k7h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", True)
LOCALHOST = os.getenv("LOCALHOST", "")

ALLOWED_HOSTS = [os.getenv("ALLOWED_HOST_1", 'localhost')]

FRONTEND_HOST_URL = os.getenv("FRONTEND_HOST_URL", "")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.gis',

    'haystack',
    'solo',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    # 'corsheaders',
    'storages',
    'django_twilio',
    'multiselectfield',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'mapwidgets',

    'applications.accounts',
    'applications.agent',
    'applications.builder',
    'applications.blog',
    'applications.analytics',
    'applications.property',
    'applications.locations',
    'applications.payments',
    'applications.advertisement',
    'applications.ourexperts',
    'applications.general',
    'django_comments',
    'mptt',
    'tagging',
    'zinnia',
    'applications.marketingproperty',
    # 'utils'
]

MIDDLEWARE = [
    # 'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'middlewares.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
]

ROOT_URLCONF = 'wynvent.urls'

SITE_ID = 1

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates', ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'zinnia.context_processors.version',
            ],
        },
    },
]

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': os.environ.get('HAYSTACK_ELASTIC_DOMAIN'),
        'INDEX_NAME': 'haystack',
    },
    # 'property': {
    #     'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
    #     'URL': os.environ.get('HAYSTACK_ELASTIC_DOMAIN'),
    #     'INDEX_NAME': 'property',
    # },
}

HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

HAYSTACK_IDENTIFIER_METHOD = 'utils.helpers.haystack_custom_get_identifier'

WSGI_APPLICATION = 'wynvent.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': os.environ.get('DB_NAME_VAL', ''),  # Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        'USER': os.environ.get('DB_USER_VAL', ''),
        'PASSWORD': os.environ.get('DB_PWD_VAL', ''),
        'HOST': os.environ.get('DB_HOST_VAL', ''),  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': os.environ.get('DB_PORT_VAL', ''),  # Set to empty string for default.
    },
    'properties': {
        'NAME': os.environ.get('EXT_DB_NAME', ''),
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'PORT': os.environ.get('EXT_PORT', ''),
        'USER': os.environ.get('EXT_USER_NAME', ''),
        'PASSWORD': os.environ.get('EXT_PASSWORD', ''),
        'HOST': os.environ.get('EXT_HOST', ''),

    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# REST_FRAMEWORK = {
#     # Use Django's standard `django.contrib.auth` permissions,
#     # or allow read-only access for unauthenticated users.
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
#         'rest_framework.permissions.DjangoModelPermissions',
#     ],
#     # 'DEFAULT_AUTHENTICATION_CLASSES': (
#     #     'utils.csrf.UnsafeSessionAuthentication',
#     #     'rest_framework.authentication.BasicAuthentication',
#     # ),
#     # 'DEFAULT_RENDERER_CLASSES': (
#     #     'rest_framework.renderers.JSONRenderer',
#     # )
# }
REST_FRAMEWORK = {
    # 'PAGINATE_BY': 1,
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'MAX_PAGINATE_BY': 100,
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'utils.csrf.UnsafeSessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 'DEFAULT_RENDERER_CLASSES': (
    #     'rest_framework.renderers.JSONRenderer',
    # )
}

SESSION_COOKIE_DOMAIN = os.environ.get('SESSION_COOKIE_DOMAIN', '')
CSRF_COOKIE_DOMAIN = os.environ.get('CSRF_COOKIE_DOMAIN', '')
# SESSION_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = True
# CORS_ALLOW_CREDENTIALS = True
# CORS_ORIGIN_ALLOW_ALL = True

# Mailchimp
MAILCHIMP_LIST_ID = os.environ.get('MAILCHIMP_LIST_ID', '')
MAILCHIMP_USERNAME = os.environ.get('MAILCHIMP_USERNAME', '')
MAILCHIMP_ACCESS_KEY = os.environ.get('MAILCHIMP_ACCESS_KEY', '')
MAILCHIMP_API_ENDPOINT = os.environ.get('MAILCHIMP_API_ENDPOINT', '')

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTHENTICATION_BACKENDS = ('applications.accounts.backend.EmailAuthBackend',
                           'allauth.account.auth_backends.AuthenticationBackend',)

AUTH_USER_MODEL = 'accounts.User'
AUTHER_MODEL = 'blog.BlogAuthor'

# SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# Set S3 as the place to store your files.
DEFAULT_FILE_STORAGE = "utils.s3utils.MediaRootS3BotoStorage"
if not LOCALHOST:
    STATICFILES_STORAGE = "utils.s3utils.StaticRootS3BotoStorage"
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME", "")
AWS_QUERYSTRING_AUTH = False
# AWS_S3_CUSTOM_DOMAIN = AWS_STORAGE_BUCKET_NAME + ".s3.amazonaws.com"


AWS_S3_CUSTOM_DOMAIN = "d164l10pl7hj29.cloudfront.net"

# Static media settings
STATIC_URL = "https://" + AWS_S3_CUSTOM_DOMAIN + "/static/"
MEDIA_URL = "https://" + AWS_S3_CUSTOM_DOMAIN + "/media/"
MEDIA_ROOT = ''

STATICFILES_DIRS = (os.path.join(BASE_DIR, "staticfiles"), )
STATIC_ROOT = "/static"


ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# Email settings
EMAIL_BACKEND = "sgbackend.SendGridBackend"
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
ADMIN_EMAIL = "admin@example.com"
DEFAULT_FROM_EMAIL = "admin@example.com"

# Coordinates map
MAP_WIDGETS = {
    "GooglePointFieldWidget": (
        ("zoom", 15),
        ("mapCenterLocationName", "Delhi"),
        ("markerFitZoom", 12),
    ),
    "GOOGLE_MAP_API_KEY": os.environ.get('GOOGLE_MAP_API_KEY', ''),
}
#otp verification Twillo settings
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')
FROM_PHONE = "+19095527831",



#payment
MERCHANT_ID = os.environ.get('MERCHANT_ID', '')
WORKING_KEY = os.environ.get('WORKING_KEY', '')
ACCESS_CODE = os.environ.get('ACCESS_CODE', '')
DOMAIN = os.environ.get('DOMAIN', '')
#import from external db with below cities
IMPORT_CITY = [city for city in os.getenv("IMPORT_CITY", '').split(',')]

# Increased limit for slug generation using AutoSlugField. Default is 100.
EXTENSIONS_MAX_UNIQUE_QUERY_ATTEMPTS = 1000000

# Try to include dev_settings, if present.
# IMPORTANT : Keep this section at the end of file.
try:
    from .dev_settings import *
except ImportError:
    pass

# Include local settings, if present.
try:
    from .local_settings import *
except ImportError:
    pass